# Reusable workflow for building on Windows

name: Build

on:
  workflow_call:
    inputs:
      builder_repo_and_digest:
        # Use .github/find-container-digest action to get this
        description: Docker repo and image digest of the builder container
        required: true
        type: string
      openslide_winbuild_repo:
        description: Use openslide-winbuild from this repo
        required: false
        type: string
        default: alanocallaghan/openslide-crossplatform-builds
      openslide_winbuild_ref:
        description: Use openslide-winbuild from this ref
        required: false
        type: string
        default: main
      pkgver:
        description: Set package version string
        required: true
        type: string
      werror:
        description: Fail on build warnings in OpenSlide packages
        required: false
        type: boolean
        default: false
    outputs:
      artifact:
        description: The name of the output artifact
        value: ${{ jobs.sdist.outputs.artifact }}


permissions:
  contents: read

jobs:
  sdist:
    name: Build source zip
    runs-on: ubuntu-latest
    container: ${{ inputs.builder_repo_and_digest }}
    outputs:
      artifact: ${{ steps.prep.outputs.artifact }}
      version_suffix: ${{ steps.prep.outputs.version_suffix }}
    steps:
      - name: Check out repo
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.openslide_winbuild_repo }}
          ref: ${{ inputs.openslide_winbuild_ref }}

      - name: Build source zip
        run: ./build.sh -p "${{ inputs.pkgver }}" sdist
      - name: Prep artifact
        id: prep
        run: |
          artifact="openslide-build-${{ inputs.pkgver }}"
          echo "artifact=$artifact" >> $GITHUB_OUTPUT
          mkdir -p "artifacts/$artifact"
          mv "openslide-build-${{ inputs.pkgver }}.zip" "artifacts/$artifact"
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.prep.outputs.artifact }}
          path: artifacts

  bdist:
    name: Build
    needs: sdist
    strategy:
      matrix:
        include:
          # - arch: i686
          #   os: win
          #   platform: ubuntu-latest
          #   container: ghcr.io/alanocallaghan/winbuild-builder:latest
          - arch: x86_64
            os: win
            platform: ubuntu-latest
            container: ghcr.io/openslide/winbuild-builder:latest
          - arch: x86_64
            os: linux
            platform: ubuntu-latest
            container: ghcr.io/openslide/winbuild-builder:latest
          - arch: x86_64
            os: mac
            platform: macos-latest
            container:
    runs-on: ${{ matrix.platform }}
    container: ${{ matrix.container }}
    steps:
      - name: Install homebrew dependencies
        if: matrix.platform == 'macos-latest'
        run: |
          brew install meson ninja flock
      - name: Download source zip
        uses: actions/download-artifact@v3
        with:
          name: ${{ needs.sdist.outputs.artifact }}
      - name: Unpack source zip
        run: |
          (cd "${{ needs.sdist.outputs.artifact }}" &&
              unzip "openslide-build-${{ inputs.pkgver }}.zip")
          mv "${{ needs.sdist.outputs.artifact }}/openslide-build-${{ inputs.pkgver }}"/* .
          rm -r "${{ needs.sdist.outputs.artifact }}"
      - name: Remove homebrew dependencies
        if: matrix.platform == 'macos-latest'
        shell: bash
        run: |
          brew uninstall git pcre2 xz gettext zstd webp fontconfig freetype --ignore-dependencies
      - name: Build binary zip
        run: |
          suffix="${{ needs.sdist.outputs.version_suffix }}"
          werror=
          if [ "${{ inputs.werror }}" = true ]; then
              werror="-w"
          fi
          ./build.sh ${suffix:+-s$suffix} \
              -p "${{ inputs.pkgver }}" $werror -m "${{ matrix.os }}-${{ matrix.arch }}" bdist
          mkdir -p "artifacts/${{ needs.sdist.outputs.artifact }}"
          EXT="tar.gz"
          if [ "${{ matrix.os }}" = "win" ]; then
              EXT="zip"
          fi
          mv "openslide-${{ matrix.os }}-${{ matrix.arch }}-${{ inputs.pkgver }}.${EXT}" \
              "artifacts/${{ needs.sdist.outputs.artifact }}"
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ needs.sdist.outputs.artifact }}
          path: artifacts

  smoke:
    strategy:
      matrix:
        include:
          # - image: windows-latest
          #   os: win
          #   arch: i686
          - image: windows-latest
            os: win
            arch: x86_64
          - image: ubuntu-latest
            os: linux
            arch: x86_64
          - image: macos-latest
            arch: x86_64
            os: mac
    runs-on: ${{ matrix.image }}
    name: Smoke test
    needs: [sdist, bdist]
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: ${{ needs.sdist.outputs.artifact }}
      - name: Unpack artifacts (win)
        shell: bash
        if: matrix.os == 'win'
        run: |
          unzip "${{ needs.sdist.outputs.artifact }}/openslide-${{ matrix.os }}-${{ matrix.arch }}-${{ inputs.pkgver }}.zip"
      - name: Unpack artifacts (other)
        if: matrix.os != 'win'
        shell: bash
        run: |
          tar xf "${{ needs.sdist.outputs.artifact }}/openslide-${{ matrix.os }}-${{ matrix.arch }}-${{ inputs.pkgver }}.tar.gz"
      - name: Report package versions
        shell: bash
        run: cat "openslide-${{ matrix.os }}-${{ matrix.arch }}-${{ inputs.pkgver }}/VERSIONS.md" >> $GITHUB_STEP_SUMMARY
      - name: Smoke test
        shell: bash
        run: |
          echo "======== ${{ matrix.arch }} ========"
          cd "${GITHUB_WORKSPACE}/openslide-${{ matrix.os }}-${{ matrix.arch }}-${{ inputs.pkgver }}/bin"
          if [ "$RUNNER_OS" == "Windows" ]; then
            if [ -e slidetool.exe ]; then
                showprops="./slidetool.exe prop list"
            else
                # OpenSlide 3.4.1
                showprops="./openslide-show-properties.exe"
            fi
          else
            if [ -e slidetool ]; then
                showprops="./slidetool prop list"
            else
                # OpenSlide 3.4.1
                showprops="./openslide-show-properties"
            fi
          fi
          OPENSLIDE_DEBUG=? $showprops 2> conftest ||:
          if ! grep -q "  synthetic  " conftest; then
              # OpenSlide 3.4.1
              echo "Smoke test not supported in this OpenSlide version"
              exit 0
          fi
          OPENSLIDE_DEBUG=synthetic $showprops ""

  jar:
    name: Package openslide Jar
    runs-on: ubuntu-latest
    needs: [sdist, bdist]
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: ${{ needs.sdist.outputs.artifact }}
      
      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2'
      - name: Download mac-arm64 CircleCI artifact
        shell: bash
        run: |
          ./circleci-download-latest.rb -u alanocallaghan -r openslide-crossplatform-builds -b main
          mv openslide-mac-arm64-main.tar.gz openslide-build-main/
      - name: Unpack and organise natives
        shell: bash
        run: |
          mv openslide-build-main/* ./
          mkdir -p darwin-aarch64 darwin-x86-64 linux-x86-64 win32-x86-64
          
          # mac arm
          tar xvf openslide-mac-arm64-main.tar.gz openslide-mac-arm64-main/lib/libopenslide.dylib --strip-components=2
          tar xvf openslide-mac-arm64-main.tar.gz openslide-mac-arm64-main/licenses --strip-components=1
          mv libopenslide.dylib darwin-aarch64/
          
          # linux
          tar xvf openslide-linux-x86_64-main.tar.gz openslide-linux-x86_64-main/lib/libopenslide.so.1.0.0 --strip-components=2
          mv libopenslide.so.1.0.0 linux-x86-64/libopenslide.so
          
          # max x86_64
          tar xvf openslide-mac-x86_64-main.tar.gz openslide-mac-x86_64-main/lib/libopenslide.dylib --strip-components=2
          mv libopenslide.dylib darwin-x86-64/

          # windows
          unzip -p openslide-win-x86_64-main.zip openslide-win-x86_64-main/bin/libopenslide-1.dll > openslide.dll
          chmod 755 openslide.dll  
          mv openslide.dll win32-x86-64/

          unzip openslide-build-main.zip
          mv openslide-build-main openslide-sources
      - name: Make jar
        shell: bash
        run: |
          jar cvf openslide-natives-darwin-aarch64.jar darwin-aarch64 licenses
          jar cvf openslide-natives-darwin-x86-64.jar darwin-x86-64 licenses
          jar cvf openslide-natives-linux-x86-64.jar linux-x86-64 licenses
          jar cvf openslide-natives-win32-x86-64.jar win32-x86-64 licenses
          mkdir -p openslide-natives
          mv *.jar openslide-natives
      - name: Upload jar
        uses: actions/upload-artifact@v1
        with:
          name: openslide-natives
          path: openslide-natives
      - name: Upload sources
        uses: actions/upload-artifact@v1
        with:
          name: openslide-sources
          path: openslide-sources
